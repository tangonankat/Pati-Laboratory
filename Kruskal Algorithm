import java.util.*;

class Edge implements Comparable<Edge> {
    int src, dest, weight;

    public Edge(int src, int dest, int weight) {
        this.src = src;
        this.dest = dest;
        this.weight = weight;
    }

    public int compareTo(Edge compareEdge) {
        return this.weight - compareEdge.weight;
    }
}

class Subset {
    int parent, rank;
}

public class KruskalAlgorithm {
    static int vertices;
    static Map<String, Integer> labelToIndex = new HashMap<>();
    static Map<Integer, String> indexToLabel = new HashMap<>();

    public static int find(Subset subsets[], int i) {
        if (subsets[i].parent != i)
            subsets[i].parent = find(subsets, subsets[i].parent);
        return subsets[i].parent;
    }

    public static void union(Subset subsets[], int x, int y) {
        int rootX = find(subsets, x);
        int rootY = find(subsets, y);

        if (subsets[rootX].rank < subsets[rootY].rank)
            subsets[rootX].parent = rootY;
        else if (subsets[rootX].rank > subsets[rootY].rank)
            subsets[rootY].parent = rootX;
        else {
            subsets[rootY].parent = rootX;
            subsets[rootX].rank++;
        }
    }

    public static void kruskal(List<Edge> edges) {
        Collections.sort(edges);
        Edge result[] = new Edge[vertices - 1];
        Subset subsets[] = new Subset[vertices];
        for (int i = 0; i < vertices; i++) {
            subsets[i] = new Subset();
            subsets[i].parent = i;
            subsets[i].rank = 0;
        }

        int e = 0, i = 0;
        while (e < vertices - 1 && i < edges.size()) {
            Edge nextEdge = edges.get(i++);
            int x = find(subsets, nextEdge.src);
            int y = find(subsets, nextEdge.dest);
            if (x != y) {
                result[e++] = nextEdge;
                union(subsets, x, y);
            }
        }

        System.out.println("\nMinimum Cost Spanning Tree:");
        int minCost = 0;
        for (i = 0; i < e; i++) {
            System.out.println("(" + indexToLabel.get(result[i].src) + "," +
                    indexToLabel.get(result[i].dest) + "," +
                    result[i].weight + ")");
            minCost += result[i].weight;
        }
        System.out.println("Minimum Cost: " + minCost);
    }

    public static void kruskalMain(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter number of vertices: ");
        vertices = scanner.nextInt();
        System.out.print("Enter number of edges: ");
        int edgesCount = scanner.nextInt();

        List<Edge> edges = new ArrayList<>();
        int[][] adjMatrix = new int[vertices][vertices];

        System.out.println("Enter edges in format (Source Destination Weight):");
        int index = 0;
        for (int i = 0; i < edgesCount; i++) {
            String srcLabel = scanner.next();
            String destLabel = scanner.next();
            int weight = scanner.nextInt();

            if (!labelToIndex.containsKey(srcLabel)) {
                labelToIndex.put(srcLabel, index);
                indexToLabel.put(index, srcLabel);
                index++;
            }
            if (!labelToIndex.containsKey(destLabel)) {
                labelToIndex.put(destLabel, index);
                indexToLabel.put(index, destLabel);
                index++;
            }

            int u = labelToIndex.get(srcLabel);
            int v = labelToIndex.get(destLabel);
            edges.add(new Edge(u, v, weight));
            adjMatrix[u][v] = weight;
            adjMatrix[v][u] = weight;
        }

        // Display the adjacency matrix
        System.out.println("\nAdjacency Matrix:");
        System.out.print("    ");
        for (int i = 0; i < vertices; i++) {
            System.out.print(indexToLabel.get(i) + "   ");
        }
        System.out.println();
        for (int i = 0; i < vertices; i++) {
            System.out.print(indexToLabel.get(i) + " | ");
            for (int j = 0; j < vertices; j++) {
                if (adjMatrix[i][j] == 0)
                    System.out.print("-   ");
                else
                    System.out.print(adjMatrix[i][j] + "   ");
            }
            System.out.println();
        }

        kruskal(edges);
        scanner.close();
    }

    public static void main(String[] args) {
        kruskalMain(args);
    }
}
